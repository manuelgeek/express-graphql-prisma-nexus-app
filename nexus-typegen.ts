/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  RoleInputType: { // input type
    id: number; // Int!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Company: { // root type
    bio?: string | null; // String
    contactPerson?: string | null; // String
    email?: string | null; // String
    id: number; // Int!
    name?: string | null; // String
    roleId?: number | null; // Int
    website?: string | null; // String
  }
  Mutation: {};
  Query: {};
  Role: { // root type
    id: number; // Int!
    name?: string | null; // String
  }
  Skill: { // root type
    id: number; // Int!
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Company: { // field return type
    bio: string | null; // String
    contactPerson: string | null; // String
    email: string | null; // String
    id: number; // Int!
    name: string | null; // String
    roleId: number | null; // Int
    roles: NexusGenRootTypes['Role'][]; // [Role!]!
    website: string | null; // String
  }
  Mutation: { // field return type
    createCompany: NexusGenRootTypes['Company']; // Company!
    createRole: NexusGenRootTypes['Role']; // Role!
    createSkill: NexusGenRootTypes['Skill']; // Skill!
    deleteCompany: NexusGenRootTypes['Company'] | null; // Company
    updateCompany: NexusGenRootTypes['Company'] | null; // Company
  }
  Query: { // field return type
    companies: Array<NexusGenRootTypes['Company'] | null> | null; // [Company]
    company: NexusGenRootTypes['Company'] | null; // Company
    roles: Array<NexusGenRootTypes['Role'] | null> | null; // [Role]
  }
  Role: { // field return type
    company: NexusGenRootTypes['Company'] | null; // Company
    id: number; // Int!
    name: string | null; // String
    skills: Array<NexusGenRootTypes['Skill'] | null> | null; // [Skill]
  }
  Skill: { // field return type
    id: number; // Int!
    name: string | null; // String
    role: NexusGenRootTypes['Role'] | null; // Role
  }
}

export interface NexusGenFieldTypeNames {
  Company: { // field return type name
    bio: 'String'
    contactPerson: 'String'
    email: 'String'
    id: 'Int'
    name: 'String'
    roleId: 'Int'
    roles: 'Role'
    website: 'String'
  }
  Mutation: { // field return type name
    createCompany: 'Company'
    createRole: 'Role'
    createSkill: 'Skill'
    deleteCompany: 'Company'
    updateCompany: 'Company'
  }
  Query: { // field return type name
    companies: 'Company'
    company: 'Company'
    roles: 'Role'
  }
  Role: { // field return type name
    company: 'Company'
    id: 'Int'
    name: 'String'
    skills: 'Skill'
  }
  Skill: { // field return type name
    id: 'Int'
    name: 'String'
    role: 'Role'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCompany: { // args
      bio: string; // String!
      contactPerson: string; // String!
      email: string; // String!
      id?: number | null; // Int
      name: string; // String!
      roleId?: number | null; // Int
      roles?: Array<NexusGenInputs['RoleInputType'] | null> | null; // [RoleInputType]
      website: string; // String!
    }
    createRole: { // args
      id?: number | null; // Int
      name: string; // String!
    }
    createSkill: { // args
      id?: number | null; // Int
      name: string; // String!
      roleId?: number | null; // Int
    }
    deleteCompany: { // args
      id: number; // Int!
    }
    updateCompany: { // args
      bio?: string | null; // String
      contactPerson?: string | null; // String
      email?: string | null; // String
      id: number; // Int!
      name?: string | null; // String
      roleId?: number | null; // Int
      roles?: Array<NexusGenInputs['RoleInputType'] | null> | null; // [RoleInputType]
      website?: string | null; // String
    }
  }
  Query: {
    company: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}